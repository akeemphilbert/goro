package domain

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewContainer(t *testing.T) {
	container := NewContainer("test-container-1", "parent-container", BasicContainer)

	assert.NotNil(t, container)
	assert.Equal(t, "test-container-1", container.ID())
	assert.Equal(t, "parent-container", container.ParentID)
	assert.Equal(t, BasicContainer, container.ContainerType)
	assert.NotNil(t, container.Members)
	assert.Len(t, container.Members, 0)

	// Check that events were emitted (both resource created and container created)
	events := container.UncommittedEvents()
	assert.Len(t, events, 2)
	assert.Equal(t, EventTypeResourceCreated, events[0].(*EntityEvent).Type)
	assert.Equal(t, EventTypeContainerCreated, events[1].(*EntityEvent).Type)
}

func TestNewContainer_AutoGeneratedID(t *testing.T) {
	container := NewContainer("", "parent-container", BasicContainer)

	assert.NotNil(t, container)
	assert.NotEmpty(t, container.ID())
	assert.Equal(t, "parent-container", container.ParentID)
	assert.Equal(t, BasicContainer, container.ContainerType)
}

func TestNewContainer_RootContainer(t *testing.T) {
	container := NewContainer("root", "", BasicContainer)

	assert.NotNil(t, container)
	assert.Equal(t, "root", container.ID())
	assert.Empty(t, container.ParentID)
	assert.Equal(t, BasicContainer, container.ContainerType)
}

func TestContainer_AddMember(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)
	initialEvents := len(container.UncommittedEvents())

	err := container.AddMember("resource-1")
	assert.NoError(t, err)
	assert.Contains(t, container.Members, "resource-1")
	assert.Len(t, container.Members, 1)

	// Check that a member added event was emitted
	events := container.UncommittedEvents()
	assert.Len(t, events, initialEvents+1)
	assert.Equal(t, EventTypeMemberAdded, events[len(events)-1].(*EntityEvent).Type)
}

func TestContainer_AddMember_Duplicate(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)

	err := container.AddMember("resource-1")
	assert.NoError(t, err)

	// Try to add the same member again
	err = container.AddMember("resource-1")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "member already exists")
	assert.Len(t, container.Members, 1)
}

func TestContainer_RemoveMember(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)
	container.AddMember("resource-1")
	container.AddMember("resource-2")
	initialEvents := len(container.UncommittedEvents())

	err := container.RemoveMember("resource-1")
	assert.NoError(t, err)
	assert.NotContains(t, container.Members, "resource-1")
	assert.Contains(t, container.Members, "resource-2")
	assert.Len(t, container.Members, 1)

	// Check that a member removed event was emitted
	events := container.UncommittedEvents()
	assert.Len(t, events, initialEvents+1)
	assert.Equal(t, EventTypeMemberRemoved, events[len(events)-1].(*EntityEvent).Type)
}

func TestContainer_RemoveMember_NotFound(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)

	err := container.RemoveMember("non-existent")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "member not found")
}

func TestContainer_HasMember(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)
	container.AddMember("resource-1")

	assert.True(t, container.HasMember("resource-1"))
	assert.False(t, container.HasMember("resource-2"))
}

func TestContainer_GetMemberCount(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)
	assert.Equal(t, 0, container.GetMemberCount())

	container.AddMember("resource-1")
	assert.Equal(t, 1, container.GetMemberCount())

	container.AddMember("resource-2")
	assert.Equal(t, 2, container.GetMemberCount())

	container.RemoveMember("resource-1")
	assert.Equal(t, 1, container.GetMemberCount())
}

func TestContainer_IsEmpty(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)
	assert.True(t, container.IsEmpty())

	container.AddMember("resource-1")
	assert.False(t, container.IsEmpty())

	container.RemoveMember("resource-1")
	assert.True(t, container.IsEmpty())
}

func TestContainer_ValidateHierarchy_CircularReference(t *testing.T) {
	container := NewContainer("container-1", "container-2", BasicContainer)

	err := container.ValidateHierarchy([]string{"container-2", "container-3", "container-1"})
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "circular reference detected")
}

func TestContainer_ValidateHierarchy_Valid(t *testing.T) {
	container := NewContainer("container-1", "container-2", BasicContainer)

	err := container.ValidateHierarchy([]string{"container-2", "container-3", "root"})
	assert.NoError(t, err)
}

func TestContainer_ValidateHierarchy_SelfReference(t *testing.T) {
	container := NewContainer("container-1", "container-1", BasicContainer)

	err := container.ValidateHierarchy([]string{})
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "container cannot be its own parent")
}

func TestContainer_SetTitle(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)

	container.SetTitle("My Container")
	assert.Equal(t, "My Container", container.GetTitle())
	assert.Equal(t, "My Container", container.GetMetadata()["title"])
}

func TestContainer_SetDescription(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)

	container.SetDescription("Container description")
	assert.Equal(t, "Container description", container.GetDescription())
	assert.Equal(t, "Container description", container.GetMetadata()["description"])
}

func TestContainer_GetPath(t *testing.T) {
	container := NewContainer("test-container", "parent-container", BasicContainer)

	path := container.GetPath()
	assert.Equal(t, "parent-container/test-container", path)
}

func TestContainer_GetPath_Root(t *testing.T) {
	container := NewContainer("root", "", BasicContainer)

	path := container.GetPath()
	assert.Equal(t, "root", path)
}

func TestContainer_Update(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)
	initialEvents := len(container.UncommittedEvents())

	container.SetTitle("Updated Title")
	container.SetDescription("Updated Description")

	// Check that update events were emitted (one for each SetTitle and SetDescription)
	events := container.UncommittedEvents()
	assert.Len(t, events, initialEvents+2)
	assert.Equal(t, EventTypeContainerUpdated, events[len(events)-2].(*EntityEvent).Type)
	assert.Equal(t, EventTypeContainerUpdated, events[len(events)-1].(*EntityEvent).Type)
}

func TestContainer_Delete(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)
	initialEvents := len(container.UncommittedEvents())

	container.Delete()

	// Check that a delete event was emitted
	events := container.UncommittedEvents()
	assert.Len(t, events, initialEvents+1)
	assert.Equal(t, EventTypeContainerDeleted, events[len(events)-1].(*EntityEvent).Type)
}

func TestContainer_Delete_NotEmpty(t *testing.T) {
	container := NewContainer("test-container", "", BasicContainer)
	container.AddMember("resource-1")

	err := container.Delete()
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "container is not empty")
}

func TestContainerType_String(t *testing.T) {
	assert.Equal(t, "BasicContainer", BasicContainer.String())
	assert.Equal(t, "DirectContainer", DirectContainer.String())
}

func TestContainerType_IsValid(t *testing.T) {
	assert.True(t, BasicContainer.IsValid())
	assert.True(t, DirectContainer.IsValid())
	assert.False(t, ContainerType("InvalidType").IsValid())
}
